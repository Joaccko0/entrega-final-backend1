<div class="card mb-4">
  <div class="card-body">
    <h5 class="card-title">Agregar Producto</h5>
    <form id="addProductForm" class="row g-2">
      <div class="col-md-6">
        <input name="title" class="form-control" placeholder="Título" required>
      </div>
      <div class="col-md-6">
        <input name="price" type="number" class="form-control" placeholder="Precio" required>
      </div>
      <div class="col-12">
        <input name="description" class="form-control" placeholder="Descripción" required>
      </div>
      <div class="col-md-4">
        <input name="code" class="form-control" placeholder="Código" required>
      </div>
      <div class="col-md-4">
        <input name="stock" type="number" class="form-control" placeholder="Stock" required>
      </div>
      <div class="col-md-4">
        <input name="category" class="form-control" placeholder="Categoría" required>
      </div>
      <div class="col-12 text-end">
        <button class="btn btn-primary">Agregar</button>
      </div>
    </form>
  </div>
</div>

<div id="alerts"></div>

<h2 class="mb-3">📦 Productos (en vivo)</h2>
<div id="productGrid" class="row row-cols-1 row-cols-md-3 g-4">
  {{!-- el grid inicial igual que en home pero con id en el div col --}}
  {{#each products}}
    <div class="col" id="prod-{{this.id}}">
      <div class="card h-100 shadow-sm">
        <div class="card-body">
          <h5 class="card-title">{{this.title}}</h5>
          <p class="card-text">${{this.price}}</p>
        </div>
        <div class="card-footer text-end">
          <button class="btn btn-danger btn-sm deleteBtn" data-id="{{this.id}}">Eliminar</button>
        </div>
      </div>
    </div>
  {{/each}}
</div>

<script src="/socket.io/socket.io.js"></script>

<script>
  const socket = io();
  const grid   = document.getElementById('productGrid');
  const alerts = document.getElementById('alerts');

  function showAlert(type, msg) {
    const wrapper = document.createElement('div');
    wrapper.innerHTML = 
      `<div class="alert alert-${type} alert-dismissible fade show" role="alert">
         ${msg}
         <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
       </div>`;
    alerts.append(wrapper);
  }

  socket.on('new-product', prod => {
    // agrego tarjeta al grid…
    const col = document.createElement('div');
    col.className = 'col';
    col.id = `prod-${prod.id}`;
    col.innerHTML = `
      <div class="card h-100 shadow-sm">
        <div class="card-body">
          <h5 class="card-title">${prod.title}</h5>
          <p class="card-text">$${prod.price}</p>
        </div>
        <div class="card-footer text-end">
          <button class="btn btn-danger btn-sm deleteBtn" data-id="${prod.id}">Eliminar</button>
        </div>
      </div>`;
    grid.append(col);
    showAlert('success', `Producto "${prod.title}" agregado`);
  });

  socket.on('delete-product', id => {
    const el = document.getElementById(`prod-${id}`);
    if (el) {
      el.remove();
      showAlert('warning', `Producto ID ${id} eliminado`);
    }
  });

    // 1) Escucho el submit del formulario de agregar producto
  document.getElementById('addProductForm').addEventListener('submit', async (e) => {
    e.preventDefault();

    // Recolecto los datos del formulario
    const formData = new FormData(e.target);
    const data = {
      title:       formData.get('title'),
      description: formData.get('description'),
      price:       Number(formData.get('price')),
      code:        formData.get('code'),
      stock:       Number(formData.get('stock')),
      category:    formData.get('category'),
      status:      true,          
      thumbnails:  []             
    };

    // Llamada HTTP para agregar el producto
    const res = await fetch('/api/products', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify(data)
    });

    if (!res.ok) {
      showAlert('danger', `Error al agregar: ${res.statusText}`);
    }
    
    e.target.reset();
    // Cuando la promesa termine, el servidor emitirá 'new-product'
  });

  // 2) Delegación de clicks para los botones “Eliminar”
  grid.addEventListener('click', async (e) => {
    if (!e.target.classList.contains('deleteBtn')) return;
    const id = e.target.dataset.id;
    const res = await fetch(`/api/products/${id}`, { method: 'DELETE' });

    if (!res.ok) {
      showAlert('danger', `Error al eliminar: ${res.statusText}`);
    }
    // Cuando termine, el servidor emitirá 'delete-product'
  });

</script>
